"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.viteVar = void 0;
const path_1 = __importDefault(require("path"));
const package_json_1 = require("vite/package.json");
const v = parseInt(package_json_1.version.substring(0, 1));
const getObj = (param) => {
    if (param.resArr === undefined)
        param.resArr = [];
    Object.keys(param.ctx).forEach((key) => {
        const typet = typeof param.ctx[key];
        const namet = param.parentName ? param.parentName + "." + key : key;
        param.resArr?.push(namet);
        if (typet === "object") {
            getObj({
                ctx: param.ctx[key],
                resArr: param.resArr,
                parentName: namet,
            });
        }
    });
    return param.resArr;
};
const getObjVal = (obj, name) => {
    const sp = name.split(".");
    let val = JSON.parse(JSON.stringify(obj));
    sp.forEach((key) => {
        val = val[key];
    });
    try {
        if (Array.isArray(val) || typeof val === "object")
            val = JSON.stringify(val);
    }
    catch (error) { }
    return val + "";
};
const viteVar = (obj) => {
    const objkey = getObj({
        ctx: obj,
    });
    const objval = {};
    objkey.forEach((key) => {
        objval[key] = getObjVal(obj, key);
    });
    const replaceCtx = (ctx) => {
        let source = ctx;
        objkey.forEach((key) => {
            let keyTemp = `#{${key}}`;
            if (source.indexOf(keyTemp) != -1) {
                source = source.replaceAll(keyTemp, objval[key]);
            }
        });
        return source;
    };
    const transform = async (html, ctx) => {
        const url = ctx.filename;
        const base = "./";
        const excludeBaseUrl = url.replace(base, "/");
        const htmlName = path_1.default.relative(process.cwd(), excludeBaseUrl);
        if (htmlName === "index.html") {
            html = replaceCtx(html);
        }
        return {
            html: html,
            tags: [],
        };
    };
    const tindex = {};
    if (v < 5) {
        tindex.transform = transform;
        tindex.enforce = "pre";
    }
    else {
        tindex.handler = transform;
        tindex.order = "pre";
    }
    return {
        name: "vite:viteVar",
        enforce: "pre",
        transform(code, id, opt) {
            code = replaceCtx(code);
            return code;
        },
        transformIndexHtml: tindex,
        postcssPlugin: "vite:viteVarDefCss",
        Once(root) {
            root.walkDecls((decl) => {
                decl.value = replaceCtx(decl.value);
            });
        },
    };
};
exports.viteVar = viteVar;
