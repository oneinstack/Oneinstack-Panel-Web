"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.nestAutoModule = void 0;
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
const readDirectory = async (directoryPath, fileCallback) => {
    try {
        const files = await fs.promises.readdir(directoryPath);
        const promises = files.map(async (file) => {
            const filePath = path.join(directoryPath, file);
            const stats = await fs.promises.stat(filePath);
            if (stats.isDirectory()) {
                await readDirectory(filePath, fileCallback);
            }
            else {
                if (fileCallback) {
                    await fileCallback(filePath);
                }
            }
        });
        await Promise.all(promises);
    }
    catch (err) {
        throw err;
    }
};
const getAutoModule = async () => {
    const AutoControllerPath = path.resolve("./src/AutoController.ts");
    const AutoServicePath = path.resolve("./src/AutoService.ts");
    const AutoSchemaPath = path.resolve("./src/AutoSchema.ts");
    const regObj = {
        controller: {
            reg: /.*\\(.*Controller)\.ts$/i,
            path: AutoControllerPath,
        },
        service: {
            reg: /.*\\(.*Service)\.ts$/i,
            path: AutoServicePath,
        },
        schema: {
            reg: /.*\\(.*Schema)\.ts$/i,
            path: AutoSchemaPath,
        },
    };
    const importStrObj = {
        controller: "",
        service: "",
        schema: "",
    };
    const exportStrObj = {
        controller: "",
        service: "",
        schema: "",
    };
    await readDirectory(path.resolve("./src"), (filepath) => {
        const excludeDirs = ["autoconfig", "config", "utils"];
        if (excludeDirs.some((dir) => filepath.includes(dir)))
            return;
        for (const key in regObj) {
            const regex = regObj[key].reg;
            const _path = regObj[key].path;
            const result = regex.exec(filepath);
            if (result && result[1]) {
                let relativePath = path.relative(path.dirname(_path), filepath);
                relativePath =
                    "./" + relativePath.replace(/\\/g, "/").replace(/\.ts$/, "");
                if (key === "schema") {
                    const schemaName = result[1].replace("Schema", "");
                    if (importStrObj[key] === "")
                        importStrObj[key] = `import { SchemaFactory } from '@nestjs/mongoose'\n`;
                    importStrObj[key] += `import { ${schemaName} } from '${relativePath}'\n`;
                    exportStrObj[key] += ` ${schemaName}:{name:${schemaName}.name,schema:SchemaFactory.createForClass(${schemaName})},`;
                }
                else {
                    importStrObj[key] += `import { ${result[1]} } from '${relativePath}'\n`;
                    exportStrObj[key] += ` ${result[1]},`;
                }
            }
        }
    });
    for (const key in exportStrObj) {
        exportStrObj[key] = `{${exportStrObj[key]}}`;
    }
    for (const key in exportStrObj) {
        exportStrObj[key] = exportStrObj[key].replace(/,}/g, " }");
    }
    return { importStrObj, exportStrObj };
};
const constStr = "const AutoModule = {}";
async function nestAutoModule(source) {
    if (source.indexOf(constStr) !== -1) {
        const { importStrObj, exportStrObj } = await getAutoModule();
        let imTop = "";
        for (const key in importStrObj) {
            imTop += importStrObj[key];
        }
        let inStr = `
    const AutoController = ${exportStrObj.controller}
    const AutoService = ${exportStrObj.service}
    const AutoSchema = ${exportStrObj.schema}
    const AutoControllerArray = Object.keys(AutoController).map((key: keyof typeof AutoController) => AutoController[key])
    const AutoServiceArray = Object.keys(AutoService).map((key: keyof typeof AutoService) => AutoService[key])
    const AutoSchemaArray = Object.keys(AutoSchema).map((key: keyof typeof AutoSchema) => {
      const schema = AutoSchema[key]
      schema.schema.set('versionKey', false)
      return schema
    })
    const AutoModule = { controllers: AutoControllerArray, services: AutoServiceArray, schemas: AutoSchemaArray }`;
        source = source.replace(constStr, inStr);
        source = imTop + source;
    }
    return source;
}
exports.nestAutoModule = nestAutoModule;
