"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.viteComType = exports.writeFile = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const writeFile = async (filename, content) => {
    try {
        fs_1.default.mkdirSync(path_1.default.dirname(filename), {
            recursive: true,
        });
        fs_1.default.writeFileSync(filename, content);
        return true;
    }
    catch {
        return undefined;
    }
};
exports.writeFile = writeFile;
function getSubdirectories(path) {
    const directories = [];
    const items = fs_1.default.readdirSync(path);
    for (const item of items) {
        const itemPath = `${path}/${item}`;
        if (fs_1.default.statSync(itemPath).isDirectory()) {
            directories.push(item);
        }
    }
    return directories;
}
let tagList = [];
const getFile = async () => {
    tagList = getSubdirectories(path_1.default.resolve(conf.comUrl));
};
const init = async () => {
    await getFile();
    let typestr = `import '@vue/runtime-core'
    export {}
    declare module '@vue/runtime-core' {
        export interface GlobalComponents {\n\n`;
    tagList.forEach((_tag) => {
        typestr += `        ${conf.prefix}${_tag.charAt(0).toUpperCase() + _tag.slice(1)}:typeof import('./${_tag}/index.vue')['default']\n`;
    });
    typestr += `
        }
    }
    `;
    await (0, exports.writeFile)(path_1.default.resolve(conf.comUrl + "/types.d.ts"), typestr);
};
const conf = {
    comUrl: "./src/components/",
    prefix: "s",
};
function viteComType(config) {
    return {
        name: "vite:viteComType",
        enforce: "pre",
        async configResolved() {
            if (config) {
                conf.comUrl = config.comUrl ?? conf.comUrl;
                conf.prefix = config.prefix ?? conf.prefix;
            }
            await init();
        },
    };
}
exports.viteComType = viteComType;
