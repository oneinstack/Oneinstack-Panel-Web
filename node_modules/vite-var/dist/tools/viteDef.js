"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.viteDef = void 0;
const path_1 = __importDefault(require("path"));
const package_json_1 = require("vite/package.json");
const v = parseInt(package_json_1.version.substring(0, 1));
const viteDef = (mode) => {
    const replaceCtx = (code) => {
        if (code.indexOf("#ifvar-") === -1)
            return code;
        const tsReg = new RegExp(`//*[^#]#ifvar-${mode}\\s(.*?)//*[^#]#endvar|<!--*[^#]#ifvar-${mode}\\s*[^-]-->(.*?)<!--*[^#]#endvar[^-]*-->`, "gs");
        const dlReg = new RegExp("//*[^#]#ifvar-(.*?)//*[^#]#endvar|<!--*[^#]#ifvar-(.*?)*[^-]-->(.*?)<!--*[^#]#endvar*[^-]-->", "gs");
        return code.replace(tsReg, "$1$2").replace(dlReg, "");
    };
    const transform = async (html, ctx) => {
        const url = ctx.filename;
        const base = "./";
        const excludeBaseUrl = url.replace(base, "/");
        const htmlName = path_1.default.relative(process.cwd(), excludeBaseUrl);
        if (htmlName === "index.html") {
            html = replaceCtx(html);
        }
        return {
            html: html,
            tags: [],
        };
    };
    const tindex = {};
    if (v < 5) {
        tindex.transform = transform;
        tindex.enforce = "pre";
    }
    else {
        tindex.handler = transform;
        tindex.order = "pre";
    }
    return {
        name: "vite:viteDef",
        enforce: "pre",
        transform(code) {
            code = replaceCtx(code);
            return code;
        },
        transformIndexHtml: tindex,
    };
};
exports.viteDef = viteDef;
