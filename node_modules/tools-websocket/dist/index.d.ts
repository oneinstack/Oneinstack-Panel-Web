interface WebSocketBeanObj { new (param: IWebSocketBeanParam):IWebSocketBean}
declare var WebSocketBean: WebSocketBeanObj;
declare enum WebSocketStatusEnum {
    /**
     * 创建中
     */
    load = 0,
    /**
     * 已连接
     */
    open = 1,
    /**
     * 已关闭
     */
    close = 2
}
/**
 * 将数据类型转换为字符串
 * @param data  返回数据类型、原数据、处理后的字符串
 * @returns
 */
declare function dataToStr(data: any): Promise<{
    type: 'string' | 'blob' | 'arraybuffer' | 'object';
    /**
     * 处理后的字符串
     */
    str: string;
    /**
     * 原数据
     */
    data: any;
}>;
/**
 * 在数据前后添加指定字符串并返回原始数据类型
 * @param str
 * @param type
 * @param prefix
 * @param suffix
 * @returns
 */
declare function addStrToData(str: string, type: string, prefix?: string, suffix?: string): Promise<string | Blob | ArrayBuffer>;

/**
 * WebSocket封装类
 * @param 封装了心跳机制 、重连机制
 */
interface IWebSocketBean {
    /**
     * 连接状态
     */
    status: number

    /**
     * WebSocket对象
     */
    websocket: WebSocket

    /**
     * 心跳对象
     */
    heart: IWebSocketHeart

    /**
     * 重连对象
     */
    reconnect: IWebSocketReconnect

    /**
     * 参数信息
     */
    param: IWebSocketBeanParam

    /**
     * 关闭旧连接创建新连接
     * @param param
     * @returns
     */
    start: (param?: IWebSocketBeanParam) => void

    /**
     * 发送数据
     * @param data 数据对象，Object、Array、String
     * @param resend 是否需要在重新连上以后再次发送该数据
     */
    send(data: any): void

    /**
     * 异常操作绑定
     */
    onerror: () => void

    /**
     * 关闭socket，销毁绑定事件、心跳事件、窗口关闭事件，修改状态为已关闭
     */
    close: () => void

    /**
     * 销毁所有对象
     */
    dispose: () => void
}

/**
 * 参数信息
 */
interface IWebSocketBeanParam {
    /**
     * 连接地址
     */
    url: string

    /**
     * 传输协议,默认blob
     */
    binaryType?:BinaryType

    /**
     * 发送消息前缀，默认为空
     */
    sendPrefix?: string

    /**
     * 发送消息后缀，默认为空
     */
    sendSuffix?: string

    /**
     * 接收消息前缀，默认为空
     */
    messagePrefix?: string

    /**
     * 接收消息后缀，默认为空
     */
    messageSuffix?: string

    /**
     * 生命周期-在建立连接以后首先调用
     */
    onopen?: () => any

    /**
     * 生命周期-在获取到数据以后首先调用
     */
    onmessage?: (ev: MessageEvent<any>) => any

    /**
     * 生命周期-在关闭或者连接异常以后首先调用
     */
    onerror?: () => void

    /**
     * 生命周期-在重连开始以后首先调用
     */
    onreconnect?: () => void

    //重连参数列表

    /**
     * 最大重连次数，默认为10次
     */
    reconnectMaxNum?: number

    /**
     * 重连间隔时间，默认为30000
     */
    reconnectGapTime?: number

    /**
     * 是否需要重连，默认为false
     */
    needReconnect?: boolean

    /**
     * 重连失败通知
     */
    onFailReconnect?: () => void

    //心跳参数列表

    /**
     * 是否需要心跳，默认为false
     */
    needHeart?: boolean

    /**
     * 心跳发送内容，默认为heartSend
     */
    heartSend?: string | ((param: IWebSocketBeanParam) => any)

    /**
     * 心跳接收内容，默认为heartGet
     */
    heartGet?: string | ((param: IWebSocketBeanParam, data: any) => any)

    /**
     * 心跳发送间隔时间，默认为30000
     */
    heartGapTime?: number

    /**
     * 心跳无响应上限，默认为10
     */
    heartFailNum?: number
}

/**
 * 心跳
 */
interface IWebSocketHeart {

    /**
     * 启动心跳
     * @returns 
     */
    start: () => void

    /**
     * 关闭心跳
     * @returns 
     */
    stop: () => void

    /**
     * 心跳发送内容，默认为heartSend
     */
    heartSend?: string | ((param: IWebSocketBeanParam) => any)

    /**
     * 心跳接收内容，默认为heartGet
     */
    heartGet?: string | ((param: IWebSocketBeanParam, data: any) => any)

    /**
     * 心跳发送间隔时间，默认为30000
     */
    heartGapTime: number

    /**
     * 心跳无响应次数
     */
    failNum: number

    /**
     * 心跳无响应上限，默认为10
     */
    heartFailNum: number

    /**
     * WebSocketBean对象
     */
    websocketbean: IWebSocketBean

    /**
     * 获取心跳信息
     * @param ev
     * @returns
     */
    onmessage: (ev: any) => any
}

/**
 * 重连
 */
interface IWebSocketReconnect {
    /**
     * 开启状态
     */
    status: boolean
    /**
     * WebSocketBean对象
     */
    websocketbean: IWebSocketBean

    /**
     * 当前重连次数
     */
    num: number

    /**
     * 最大重连次数，默认为10次
     */
    reconnectMaxNum: number

    /**
     * 重连间隔时间
     */
    reconnectGapTime: number

    /**
     * 开始尝试重连
     */
    start: () => void

    /**
     * 关闭重连
     */
    stop: () => void
}
interface Window {
    [key:string]:any
}