interface ArrayUtilInter {
    /**
     * 数组元素交换位置
     * @param {array} arr 数组
     * @param {number} index1 添加项目的位置
     * @param {number} index2 删除项目的位置
     * index1和index2分别是两个数组的索引值，即是两个要交换元素位置的索引值，如1，5就是数组中下标为1和5的两个元素交换位置
     */
    swapArray: (arr: Array<any>, index1: number, index2: number) => any[];
    /**
     * 上移
     * @param arr
     * @param index
     */
    zIndexUp: (arr: Array<any>, index: number) => void;
    /**
     * 下移
     * @param arr
     * @param index
     */
    zIndexDown: (arr: Array<any>, index: number) => void;
    /**
     * 置顶
     * @param arr
     * @param index
     */
    zIndexTop: (arr: Array<any>, index: number) => void;
    /**
     * 置底
     * @param arr
     * @param index
     */
    zIndexBottom: (arr: Array<any>, index: number) => void;
    /**
     * 获取差集
     * @param arr1
     * @param arr2
     * @returns
     */
    diff: (arr1: Array<any>, arr2: Array<any>) => any[];
}
declare var ArrayUtil: ArrayUtilInter;
interface Base64UtilInter {
    /**
     * 加密字符串为base64
     * @param input
     * @returns
     */
    encode: (input: any) => string;
    /**
     * 解密base64为字符串
     * @param input
     * @returns
     */
    decode: (input: any) => string;
}
declare var Base64Util: Base64UtilInter;
interface ByteUtilInter {
    /**
     * 将byte数组转为字符串
     * @param str
     * @returns
     */
    byteToString: (arr: any) => string;
    /**
     * 将字符串转为byte数组
     * @param str
     * @returns
     */
    stringToByte: (str: any) => any[];
    /**
     * 将Uint8Array转为字符串
     * @param fileData
     * @returns
     */
    uint8ArrayToString(fileData: any): string;
    /**
     * 将字符串转为Uint8Array
     * @param str
     * @returns
     */
    stringToUint8Array(str: any): Uint8Array;
}
declare var ByteUtil: ByteUtilInter;
/**
 * 全局事件管理
 */
interface CEventInter {
    eventbean: CEventBeanInter;
    /**
     * 注册-On-cycle
     * @param key 注册名称
     * @param callback 执行回调
     * @param vm 附带信息
     * @returns 返回唯一注册id
     */
    on(key: any, callback: (data: any) => any, vm?: any): string;
    /**
     * 只注册一次-Once-cycle
     * @param key 注册名称
     * @param callback 执行回调
     * @param vm 附带信息
     * @returns 返回唯一注册id
     */
    once(key: any, callback: (data: any) => any, vm?: any): string;
    /**
     * 调用
     * @param key 注册名称
     * @param data 回调函数传入参数
     * @param emitAll 通知所有事件对象（CEvent和所有new CEventBean()），默认为true
     */
    emit(key: any, data?: any, emitAll?: boolean): void;
    /**
     * 销毁-Offload
     * @mode 模式1:多id或者key名称传入-off('onid1')、off('onid1','getData'...)
     * @mode 模式2:on方法传入的key和方法-off('getData',fun)
     * @param uids-传入的是id或者key加方法清理的是key的单个注册，传入的是key清理key所有注册
     */
    off(...uids: any): void;
    /**
     * 清空
     */
    clear(): void;
}
declare var CEvent: CEventInter;
/**
 * 事件管理对象
 */
interface CEventBeanInter {
    /**
     * 提供默认的挂载验证事件，默认为通过，需要手动销毁事件
     * @returns
     * @example
     * //在vue3中使用
        import { getCurrentInstance } from 'vue'
        const findTopTag = (el: any, tag: string = 'html'): any => {
            if (!el?.parentElement) return null
            if (el.parentElement.tagName.toLocaleLowerCase() === tag) return el.parentElement
            else return findTopTag(el.parentElement, tag)
        }
        CEvent.eventbean.vm = function () {
            const _vm = getCurrentInstance()
            return () => findTopTag(_vm?.vnode.el?.parentElement)
        }
     */
    vm: () => () => boolean;
    eventMap: Map<any, any>;
    id: string;
    tag: string;
    /**
     * 注册
     * @param key 注册名称
     * @param callback 执行回调
     * @param vm 挂载信息
     * @returns 返回唯一注册id
     */
    on: (key: any, callback: (data: any) => any, vm?: any) => string;
    /**
     * 只注册一次
     * @param key 注册名称
     * @param callback 执行回调
     * @param vm 挂载信息
     * @returns 返回唯一注册id
     */
    once: (key: any, callback: (data: any) => any, vm?: any) => string;
    /**
     * 调用
     * @param key 注册名称
     * @param data 回调函数传入参数
     * @param emitAll 通知所有事件对象（CEvent和所有new CEventBean()），默认为true
     */
    emit: (key: any, data?: any, emitAll?: boolean) => void;
    /**
     * 销毁
     * @mode 模式1:多id或者key名称传入-off('onid1')、off('onid1','getData'...)
     * @mode 模式2:on方法传入的key和方法-off('getData',fun)
     * @param uids-传入的是id或者key加方法清理的是key的单个注册，传入的是key清理key所有注册
     */
    off: (...uids: any) => void;
    clear: () => void;
}
interface CEventBeanObj { new ():CEventBeanInter}
declare var CEventBean: CEventBeanObj;
/**
 * 事件管理中心，不应该调用此对象任何方法
 */
interface CEventCoreInter {
    id: number;
    getId: () => string;
    map: {
        [key: string]: any;
    };
    /**
     * 添加一个_CEventBean对象
     * @param _CEventBean
     */
    add: (_CEventBean: any) => void;
    /**
     * 移除一个_CEventBean对象
     * @param _CEventBean
     */
    remove: (...ids: any[]) => void;
}
declare var CEventCore: CEventCoreInter;
/**
 * Cookie工具
 */
interface CookieInter {
    /**
     * 默认添加有效时间 3600天
     */
    expire: number;
    /**
     * 默认添加有效单位 秒
     */
    expireUnit: number;
    /**
     * 设置cookie
     * @param name
     * @param value
     * @param config
     */
    set(name: string, value: any, config?: {
        /**
         * path-/
         */
        path?: string;
        /**
         * 有效时间-秒
         */
        expire?: number;
        /**
         * 域名
         */
        domain?: string;
        /**
         * 活动有效
         */
        session?: boolean;
    }): void;
    /**
     * 获取cookie
     * @param name
     * @returns
     */
    get(name: string): any;
    /**
     * 删除cookie
     * @param name
     * @param domain
     */
    remove(name: string, domain?: string): void;
    /**
     * 清空所有key和值
     */
    clear(paths?: string[], domain?: string): void;
}
declare var Cookie: CookieInter;
/**
 * localStorage缓存工具
 * @param 说明 -将数据存入localStorage
 */
interface CookieLInter {
    localStorage: Storage;
    /**
     * 默认添加有效单位 秒
     */
    expireUnit: number;
    /**
     * 设置
     */
    set(key: string, value: any, config?: {
        /**
         * 有效时间-秒
         */
        expire?: number;
    }): void;
    /**
     * 获取指定值
     */
    get(key: string): any;
    /**
     * 移除指定值
     */
    remove(key: string): void;
    /**
     * 清空所有key和值
     */
    clear(): void;
}
declare var CookieL: CookieLInter;
/**
 * 缓存处理
 * @param 说明 -对localStorage(CookieL)和cookie(Cookie)的数据处理
 */
interface CookieValInter {
    /**
     * 存储
     * @param value
     * @returns
     */
    setValue: (value: any) => any;
    /**
     * 获取
     * @param value
     * @returns
     */
    getValue: (value: any) => any;
}
declare var CookieVal: CookieValInter;
interface DomUtilInter {
    /**
     * 对节点添加监听事件和回调
     * @param dom
     * @param type
     * @param listener
     * @returns
     */
    listener: <K extends keyof GlobalEventHandlersEventMap>(dom: Node | Window, type: K, listener: (this: Node, ev: GlobalEventHandlersEventMap[K]) => any) => {
        remove: () => void;
    };
    /**
     * 获取管理点击或者触摸事件管理对象
     * @returns
     */
    useTouch: () => {
        move: (event: TouchEvent | Touch | Event | MouseEvent) => void;
        start: (event: TouchEvent | Touch | Event | MouseEvent) => void;
        reset: () => void;
        isVertical: () => boolean;
        isHorizontal: () => boolean;
        conf: {
            startX: number;
            startY: number;
            deltaX: number;
            deltaY: number;
            offsetX: number;
            offsetY: number;
            direction: string;
        };
    };
    /**
     *
     * @param div 目标，需要是absolute
     * @param fun 移动完毕之后的回调
     */
    moveDiv(div: HTMLDivElement, onmouseup?: (data: {
        left: number;
        top: number;
    }) => any): void;
    /**
     * 获取滚动条宽度
     */
    getScrollbarWidth(): number;
    /**
     * 获取元素中的文本是否超出了父级
     * @param element -dom对象
     * @returns
     * @example
     *
    建议使用应用css以下内容的标签：
    overflow: hidden;
    overflow-wrap: break-word;
    text-overflow: ellipsis;
    white-space: nowrap;（必须，否则返回false）
    width: 330px;
     */
    isTextOverflow: (element: any) => boolean;
    /**
     * 加载图片资源
     * @param param
     * @returns
     */
    loadImage: (param: {
        /**
         * 图片地址
         */
        url: string;
        /**
         * 超时时间-默认没有超时时间
         */
        timeout?: number | undefined;
        /**
         * 图片扩展名-默认['.png', '.jpg', '.jpeg', '.webp', '.gif', '.svg']
         */
        extensions?: string[] | undefined;
        /**
         * 是否返回base64-默认false
         */
        base64?: boolean | undefined;
        /**
         * base64质量-默认1
         */
        base64Quality?: number | undefined;
        /**
         * 是否返回arrayBuffer-默认false
         */
        arrayBuffer?: boolean | undefined;
        /**
         * 加载完成回调
         */
        load?: ((img: HTMLImageElement, res: {
            dataBase64: string;
            dataArray: ImageData;
        }) => void) | undefined;
        /**
         * 加载失败回调
         */
        error?: (() => void) | undefined;
    }) => {
        /**
         * 图片对象
         */
        img: HTMLImageElement;
        /**
         * 取消加载-需要手动回调
         */
        abort: () => void;
    } | undefined;
}
declare var DomUtil: DomUtilInter;
/**
 * 简单加解密工具
 */
interface EnUtilInter {
    /**
     * 加密
     * @param str
     * @returns
     */
    encode: (str: string) => string;
    /**
     * 解密
     * @param str
     * @returns
     */
    decode: (str: string) => string;
}
declare var EnUtil: EnUtilInter;
/**
 * @type protype
 */
interface Array<T> {
    /**
     * 移除数组中的指定内容，用于不是对象素组
     * @param str 删除内容
     * @example
     * let arr = new Array<string>()
     * arr.push("1")
     * arr.push("2")
     * arr.remove("1")
     */
    remove(item: (val: T) => any): void;
    /**
     * 去重
     * @param predicate 比较说明
     * @returns
     * @example
     * const arr1 = arr.toSet()
     * const arr2 = arr.toSet((next,pre)=>next.id===pre.id)
     */
    toSet(predicate?: (next: T, pre: T) => any): any[];
    /**
     * 随机排序
     */
    randSort(): void;
    /**
     * 累加
     * @param field -对象字段名称
     * @example
     * const num = arr.sum()
     * const num = arr.sum('num')
     */
    sum(field?: string): any;
}
/**
 * @type protype
 */
interface Date {
    /**
     * 格式化时间
     * @param fmt 时间字符串格式
     * @param formatFail 格式化失败时返回的字符串
     * @example
     * new Date().Format('yyyy-MM-dd hh:mm:ss') //2021-12-17 11:30:00
     */
    Format(fmt?: any, formatFail?: string): string;
    /**
     * 格式化时间差
     * @param fmt 时间字符串格式
     * @example
     * new Date().Format('yyyy-MM-dd hh:mm:ss') //2021-12-17 11:30:00
     */
    FormatDiff(fmt?: any): string;
    /**
     * 获取处理时差后的时间戳
     */
    getTimeDiff(): any;
}
/**
 * @type protype
 */
interface DOMRect {
    /**
     * x,y坐标是否处于矩形内
     * @param x
     * @param y
     */
    contains(x: number, y: number): boolean;
    /**
     * x坐标是否处于矩形内
     * @param x
     */
    containX(x: number): boolean;
    /**
     * y坐标是否处于矩形内
     * @param y
     */
    containY(y: number): boolean;
}
/**
 * @type protype
 */
interface Function {
    /**
     * 获取参数列表
     */
    args(): string[];
}
/**
 * @type protype
 */
interface Map<K, V> {
    /**
     * 将map输出为json
     */
    toJson(): string;
}
interface r_DateInter {
    init(): void;
}
declare var r_Date: r_DateInter;
/**
 * 文件请求工具
 */
interface FileUtilInter {
    /**
     * 使用的请求对象，可修改
     */
    httpBean: HttpInter;
    /**
     * 获取读取文件函数
     * @param param -baseUrl-获取文件根地址，默认为/，outtime-超时时间，默认为30000
     * @returns
     */
    getFileFun: (param?: TFileConfig) => (url: string) => Promise<any>;
    /**
     * 获取文件内容
     * @param url
     * @returns
     */
    getFile: (url: string, param?: TFileConfig) => Promise<any>;
}
type TFileConfig = Partial<FileConfigBean>;
/**
 * 配置内容
 */
type FileConfigBean = {
    /**
     * 根地址
     */
    base: string;
    /**
     * 超时时间
     */
    outtime: number;
    /**
     * 消息类型
     */
    responseType: XMLHttpRequestResponseType;
};

declare var FileUtil: FileUtilInter;
/**
 * 对函数进行防抖、节流、加锁
 */
interface FunUtilInter {
    /**
     * 定时器
     */
    timer: typeof Timer;
    /**
     * 防抖-在规定时间内只执行最后一次,默认500ms
     */
    debounce: (fn: Function, delay?: number) => void;
    /**
     * 节流-在规定时间内只执行第一次,默认500ms
     */
    throttle: (fn: Function, delay?: number, tip?: () => void) => void;
    /**
     * 触发节流限制提示，需要提示直接覆盖此方法
     */
    throttleTip: () => void;
    /**
     * 资源管理
     */
    /**
     * 执行一个函数并返回结果，在未返回结果再次执行会等待第一个执行完毕，后续的执行获取到同一个结果
     * @example
     * //使用接口获取数据，连续调用三次，实际只会请求一次
     * const getData = ()=>{
     *   const data = FunUtil.lock(async ()=>{
     *     return await http.get('/test')
     *   })
     *   return data
     * }
     * getData()
     * getData()
     * getData()
     *
     */
    lock: (fn: Function) => Promise<any>;
}
declare var FunUtil: FunUtilInter;
interface H5UtilInter {
    /**
     * 设计尺寸宽度/也可以在head上添加属性design-width进行设置，默认750
     */
    remWidth: number;
    /**
     * 最大显示宽度(控制宽屏下的显示内容)，可传入方法动态控制宽度限制：()=>{return 750}，默认500
     */
    maxWidth: number | Function;
    /**
     * 设计字体大小-默认1
     */
    remFontSize: number;
    /**
     * rem手机适配
     * @example
     * //使用前需要在<head design-width="750">中修改设计尺寸或者使用H5Util.remWidth = 750修改，默认值为750
     * //remFontSize默认为1或者使用H5Util.remFontSize = 100
     * //需要使用 <body><div class="design-box"></div></body> 起到限制作用或自行写入样式
     * //当使用默认开发，750rem等于750px
     * @returns
     */
    rem(): void;
    /** 获取当前处于屏幕中的最大宽度 */
    getDeviceWidth(): number;
    /** rem转px */
    rem2px(rem: number): number;
    /** px转rem */
    px2rem(px: number): number;
    /**
     * 最大宽高的比例限制 默认是 高915 / 宽412的值2.221
     */
    maxRatio: number;
    /**
     * 设计尺寸高度-默认1334
     */
    remHeight: number;
    /** 获取当前处于屏幕中的最大宽高 */
    getMaxBox(): {
        height: number;
        width: number;
    };
    /** 获取最大高度 */
    getMaxHeight(): number;
    /** 获取最大宽度 */
    getMaxWidth(): number;
}
declare var H5Util: H5UtilInter;
/**
 * HttpUtil覆盖原生方法工具
 */
interface HttpUtilInter {
    /**
     * 初始化函数，自动调用，调用此方法无任何效果
     * @returns
     */
    init(): void;
    /**
     * 对网址进行ping值拿到延迟
     * @param url
     * @param timeout
     * @returns
     */
    ping(url: string, timeout?: number): Promise<unknown>;
}
declare var HttpUtil: HttpUtilInter;
/**
 * iframe标签简单交互工具
 */
interface IFrameUtilInter {
    /**
     * 发送数据
     * @param data
     * @param childrenId -传入id时向iframe子节点传输数据，反之向父级传输数据
     */
    sendMessage: (data: any, childrenId?: string) => void;
    /**
     * 注册接收数据
     * @param fun
     */
    onMassage: (fun: (data: any) => void) => void;
    /**
     * 销毁接收数据
     * @param fun
     */
    offMassage: (fun: (data: any) => void) => void;
}
declare var IFrameUtil: IFrameUtilInter;
interface JSONUtilInter {
    /**
     * 复制json对象
     */
    cp<T>(obj: T): T;
    /**
     * 深度拷贝-对象、数组、时间、正则
     * @param objT
     * @param hash
     * @returns
     */
    deepClone<T>(objT: T, hash?: WeakMap<object, any>): T;
    /**
     * 将json对象中的json字符串转为对象
     * @param data -对象
     */
    strToObject: (data: {
        [key: string]: any;
    }) => void;
}
declare var JSONUtil: JSONUtilInter;
interface KeyUtilInter {
    /**
     * 监听组合键
     * @param keys 组合键数组
     * @param callback 触发回调函数
     * @example
     * //Ctrl+Q
     * groupKey(['Ctrl','Q'],()=>{
     *  console.log('成功')
     * })
     * @returns
     */
    groupKey: (keys: string[], callback: Function) => () => void;
}
declare var KeyUtil: KeyUtilInter;
/**
 * @desc 解决浮动运算问题，避免小数点后产生多位数和计算精度损失。
 *
 * 问题示例：2.3 + 2.4 = 4.699999999999999，1.0 - 0.9 = 0.09999999999999998
 */
type NumberType = number | string;
/**
 * Correct the given number to specifying significant digits.
 *
 * @param num The input number
 * @param precision An integer specifying the number of significant digits
 *
 * @example strip(0.09999999999999998) === 0.1 // true
 */
declare function strip(num: NumberType, precision?: number): number;
/**
 * Return digits length of a number.
 *
 * @param num The input number
 */
declare function digitLength(num: NumberType): number;
/**
 * Convert the given number to integer, support scientific notation.
 * The number will be scale up if it is decimal.
 *
 * @param num The input number
 */
declare function float2Fixed(num: NumberType): number;
/**
 * Accurate rounding method.
 *
 * @param num The number to round
 * @param decimal An integer specifying the decimal digits
 */
declare function round(num: NumberType, decimal: number): number;
interface MathUtilInter {
    /**
     * 将所有值转换为float
     */
    getNumber(val: any, fixed?: number): number;
    /**
     * 获取两个整数之间的随机数
     */
    getRandomInt(min: number, max: number): number;
    /**
     * 将给定的数字更正为指定有效数字。
     * @param num — 数字
     * @param precision — 指定有效位数的整数
     * @example
     * strip(0.09999999999999998) === 0.1 // true
     */
    strip: typeof strip;
    /**
     * 加法
     */
    plus: (...nums: NumberType[]) => number;
    /**
     * 减法
     */
    minus: (...nums: NumberType[]) => number;
    /**
     * 乘法
     */
    times: (...nums: NumberType[]) => number;
    /**
     * 除法
     */
    divide: (...nums: NumberType[]) => number;
    /**
     * 精确的四舍五入
     */
    round: typeof round;
    /**
     * 返回数字的长度
     */
    digitLength: typeof digitLength;
    /**
     * 将给定的数字转换为整数，支持科学记数法。如果是小数，这个数字将按比例增大。
     */
    float2Fixed: typeof float2Fixed;
}

declare var MathUtil: MathUtilInter;
interface ObjectUtilInter {
    objectToString: () => string;
    toTypeString: (value: unknown) => string;
    isArray: (arg: any) => arg is any[];
    isMap: (val: unknown) => val is Map<any, any>;
    isSet: (val: unknown) => val is Set<any>;
    isDate: (val: unknown) => val is Date;
    isFunction: (val: unknown) => val is Function;
    isString: (val: unknown) => val is string;
    isSymbol: (val: unknown) => val is symbol;
    isObject: (val: unknown) => val is Record<any, any>;
    isPromise: <T = any>(val: unknown) => val is Promise<T>;
    /**
     * 遍历对象中的每一个key和value
     * @param obj Object、Array
     */
    getObject: (obj: any, fun: (key: string, value: any, obj: any) => any) => boolean;
    /**
     * 遍历对象中的每一个对象，children为对象的子对象字段
     * @param obj Object、Array
     * @param fun 回调函数
     * @param children 对象的子对象列表字段，默认['children']
     */
    getObjectByChildren: (obj: any, fun: (obj: any) => any, children?: string[]) => void;
    /**
     * 深度合并对象，老字段覆盖值或保留，新字段新增
     * @param obj1
     * @param obj2
     * @returns
     *
     * @example
     * let a = {a:1,b:{n:2,c:2},c:{r:1,n:1}}
     * let newa = {a:2,b:{c:3}}
     * const c = deepMerge(newa,a)
     */
    deepMerge: (obj1: any, obj2: any) => any;
    /**
     * 使用路径获取对象的值
     * @param obj
     * @param path
     * @returns
     * @example
     * const a = {b:{c:6}}
     * console.log(getPathValue(a,'b.c'))//输出6
     */
    getPathValue: (obj: any, path: string) => string;
}
declare var ObjectUtil: ObjectUtilInter;
interface ScriptUtilInter {
    /**
     * 加载js文件到页面
     * @param url
     * @returns
     */
    scriptLoad(url: any): Promise<boolean>;
}
declare var ScriptUtil: ScriptUtilInter;
interface StrUtilInter {
    /**
     * 获取uuid
     * @returns
     */
    uuid(): string;
    /**
     * 获取唯一递增id
     */
    getId: () => string;
    /**
     * 判断内容是否为空,null,undefined,NaN，空数组，空字符串返回true
     */
    isNull(str: any): boolean;
    /**
     * 验证数字
     */
    isNumber(obj: any): boolean;
    /**
     * 获取url地址中的参数对象信息
     * @param url 如/list?pageSize=1&pageNum=2
     * @param return 如{pageSize:1,pageNum:2}不符合返回{}
     */
    getParam(url: any): any;
    /**
     * 复制字符串
     */
    copyText(text: string): Promise<boolean>;
}
declare var StrUtil: StrUtilInter;
/**
 * 全局定时器
 */
interface TimerInter {
    timerBean: TimerBeanInter;
    /**
     * 添加一个延时任务
     * @param fun
     * @param timeGap -延迟时间
     */
    once(fun: () => void, timeGap?: number, vm?: any): any;
    /**
     * 清理所有任务(任何地方调用都会清理)
     */
    clear: () => void;
    /**
     * 等待时间单位 1-毫秒 1000-秒
     */
    delayUnit: number;
    /**
     * 等待时间
     * @param millisecond
     * @returns
     */
    delay(millisecond?: number, delayUnit?: number): Promise<void>;
    /**
     * 添加一个循环任务
     * @param fun
     * @param timeGap -循环时间
     * @param firstRun -立即执行一次
     *
     */
    on(fun: () => void, timeGap: number, firstRun?: boolean, vm?: any): any;
    /**
     * 注销循环-Unload
     */
    un: (...ids: any[]) => void;
}
declare var Timer: TimerInter;
/**
 *  定时器对象
 */
interface TimerBeanInter {
    map: {
        [key: string]: TimerInfo;
    };
    /**
     * 提供默认的挂载验证事件，默认为通过，需要手动销毁定时时间对象
     * @returns
     * @example
     * //在vue3中使用
        import { getCurrentInstance } from 'vue'
        const findTopTag = (el: any, tag: string = 'html'): any => {
            if (!el?.parentElement) return null
            if (el.parentElement.tagName.toLocaleLowerCase() === tag) return el.parentElement
            else return findTopTag(el.parentElement, tag)
        }
        const timer = new TimerBean()
        timer.vm = function () {
            const _vm = getCurrentInstance()
            return () => findTopTag(_vm?.vnode.el?.parentElement)
        }
     */
    vm: () => () => boolean;
    /**
     * 添加一个延时任务
     * @param fun
     * @param timeGap -延迟时间
     */
    once: (fun: () => void, timeGap?: number, vm?: any) => any;
    /**
     * 清空任务-仅能清理TimerBean中的任务
     */
    clear: () => void;
    /**
     * 等待时间单位 1-毫秒 1000-秒
     */
    delayUnit: number;
    /**
     * 等待时间
     * @param millisecond
     * @returns
     */
    delay: (millisecond?: number, delayUnit?: number) => Promise<void>;
    /**
     * 添加一个循环任务
     * @param fun
     * @param timeGap -循环时间
     * @param firstRun -立即执行一次
     *
     */
    on: (fun: () => void, timeGap: number, firstRun?: boolean, vm?: any) => any;
    /**
     *  清理循环-仅能清理TimerBean中的任务
     */
    un: (...ids: any[]) => void;
}
interface TimerBeanObj { new ():TimerBeanInter}
declare var TimerBean: TimerBeanObj;
/**
 * 定时器核心
 */
interface TimerCoreInter {
    id: number;
    getId: () => string;
    map: {
        [key: string]: TimerInfo;
    };
    add: (fun: () => void, timeGap: number, loop: boolean, vm: any) => TimerInfo;
    remove: (...ids: any[]) => void;
    removeAll: () => void;
}
declare var TimerCore: TimerCoreInter;
interface TimeUtilInter {
    /**
     * 获取倒计时
     * @param time 时间间隔（比如60000）
     * @returns
     */
    countdown: (time: number) => (string | number)[];
    /**
     * 获取某天的开始和结束时间-默认为今天
     * @param offset - 默认0是今天，1是明天，-1是昨天
     * @param standardDate - 默认是今天，传入指定日期比如7天后，offset为1获取的是8天后
     * @example
     * //获取近7天的开始和结束时间
     * const startTime = TimeUtil.somedayse()[0]
     * const endTime = TimeUtil.somedayse(6)[1]
     * @returns
     */
    somedayse: (offset?: number, standardDate?: Date) => number[];
}
declare var TimeUtil: TimeUtilInter;


interface DateConstructor {
    /**
     * 格式化时间
     * @param date 时间
     * @param format 时间字符串格式
     * @param formatFail 格式化失败时返回的字符串
     * @example
     * Date.Format(new Date(),'yyyy-MM-dd hh:mm:ss') //2021-12-17 11:30:00
     */
    Format(date: Date | string | number, format?: string, formatFail?: string): string;

    /**
     * 格式化失败时返回的字符串
     */
    formatFail: string

    /**
     * 格式化时差时间
     * @param date 时间
     * @param format 时间字符串格式
     * @example
     * Date.FormatDiff(new Date(),'yyyy-MM-dd hh:mm:ss') //2021-12-17 11:30:00
     */
    FormatDiff(date: Date | string | number, format?: string): string;

    /**
     * 时差-主要用于处理时差，配合Date的getTimeDiff、FormatDiff使用
     */
    timeDiff: number;
}
/**
 * 传入参数和数据
 */
type THttpReq = <T = any>(param: string | THttpReqParam, data?: {[key:string]:any}) => Promise<T>


type THttpReqParam = { 
    /**
     * 请求地址
     */
    url: string; 
    /**
     * 请求类型-仅支持POST和GET
     */
    method?: "POST"|"GET"; 
    /**
     * 消息类型-默认text
     */
    responseType?: XMLHttpRequestResponseType
    /**
     * 超时时间-默认30000
     */
    timeout?: number;
    /**
     * 是否跨域传入cookie-默认false
     */
    
    withCredentials?: boolean;

    /**
     * 过期时间，对接口和参数的结果进行缓存，刷新页面后丢失，单位秒,当为0时，不缓存,为-1时，缓存1天
     */
    expire?:number;
    /**
     * 请求头
     */
    headers?:THttpReqHeaders

    /**
     * 文件上传进度
     * @param percent 百分比
     * @param loaded 已上传大小
     * @param total 总大小
     */
    onProgress?: (percent:number,loaded:number,total:number) => void;

 }


 interface callbackConfig<T = any,K = any> {
    /**
     * 请求头
     */
    headers: THttpReqHeaders;
    /**
     * 传入数据
     */
    data: T;
    /**
     * 传入参数
     */
    param: K;
    /**
     * 中断当前请求
     */
    stop: () => void;
}

type THttpReqHeaders = {
    [key:string]:any
    /**
     * 内容类型
     */
    'Content-Type'?:'application/json'|'multipart/form-data'|'text/plain' | 'application/x-www-form-urlencoded'
}

interface THttpConfig {
    /**
     * 根地址，当传入的url以http开头，此地址无效
     */
    base: string;
    /**
     * 超时时间-默认30000
     */
    timeout: number;
    /**
     * 消息类型-默认text
     */
    responseType: XMLHttpRequestResponseType;
    /**
     * expire为-1时的最大过期时间，默认为1天
     */
    expireMaxTime:number;
    /**
     * 是否跨域传入cookie-默认false
     */
    
    withCredentials: boolean;
    /**
     * 标头
     * @example
     * //默认
     * {
            Accept: '*',
            'Content-Type': 'application/json'
        }
     */
    headers: THttpReqHeaders;
    /**
     * 请求前处理
     * @param config 
     * @returns 
     */
    before: (config: callbackConfig,xhr:XMLHttpRequest) => void | Promise<any>;
    /**
     * 请求后处理
     * @param xhr 
     * @returns 
     */
    after: (xhr:{
        /**
         * 获取数据
         */
        data: any;
        /**
         * 消息类型
         */
        responseType: XMLHttpRequestResponseType;
        /**
         * 状态码
         */
        status: number;
        
        /**
         * 当前请求对象
         */
        xhr:XMLHttpRequest;
    },config:callbackConfig) => void | Promise<any>;
    /**
     * 异常处理
     * @param e 
     * @returns 
     */
    error: (status:number,config:callbackConfig,xhr:{data:any,responseType:XMLHttpRequestResponseType,status:number,xhr:XMLHttpRequest}) => void;
}

/**
 * 全局请求对象
 */
interface HttpInter {
    /**
     * 数据缓存
     */
    dataCache:{
        /**
         * 数据
         */
        [key:string]:{
            /**
             * 数据
             */
            data:any;
            /**
             * 过期时间
             */
            expire:number;
        }
    };
    /**
     * 请求管理器
     */
    xhr: {
        [key: string]: XMLHttpRequest;
    };
    /**
     * get请求
     */
    get: THttpReq;
    /**
     * post请求
     */
    post: THttpReq;
    /**
     * 中断所有请求
     */
    stop: () => void;

    /**
     * 配置信息
     */
    config: THttpConfig;

    /**
     * 设置配置信息
     */
    setConfig:(config?:Partial<THttpConfig>)=>void
}

/**
 * 全局请求对象
 */
declare var http:HttpInter;

/**
 * 获取一个http请求对象
 */
declare var httpBean:(config?:Partial<THttpConfig>)=>HttpInter;type TimerInfo = {
    /**
     * 任务内容
     * @returns
     */
    fun: () => void
    /**
     * 挂载节点验证
     */
    vm: any
    
    /**
     * 任务id
     */
    id: string

    /**
     * 清理
     */
    remove: () => void
}

interface Window {
    [key:string]:any
}

/**
 * 字符串、数组、数字判空
 */
declare var isNull: (str: any)=> boolean;