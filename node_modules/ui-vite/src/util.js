"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteDirOrFile = exports.copyDirOrFile = exports.writeFile = exports.readFile = exports.readDir = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const readDir = async (dirurl, filecallback) => {
    const dirInfo = fs_1.default.readdirSync(dirurl);
    for (let i = 0; i < dirInfo.length; i++) {
        const item = dirInfo[i];
        const location = path_1.default.join(dirurl, item);
        const info = fs_1.default.statSync(location);
        if (info.isDirectory()) {
            if ((await (0, exports.readDir)(location, filecallback)) === true)
                return true;
        }
        else {
            if ((await filecallback(location)) === true)
                return true;
        }
    }
};
exports.readDir = readDir;
const readFile = async (filename) => {
    try {
        return fs_1.default.readFileSync(filename).toString();
    }
    catch {
        return undefined;
    }
};
exports.readFile = readFile;
const writeFile = async (filename, content) => {
    try {
        fs_1.default.mkdirSync(path_1.default.dirname(filename), {
            recursive: true
        });
        fs_1.default.writeFileSync(filename, content);
        return true;
    }
    catch {
        return undefined;
    }
};
exports.writeFile = writeFile;
const copyDirOrFile = async (sourcePath, destinationPath) => {
    const stats = fs_1.default.statSync(sourcePath);
    if (stats.isDirectory()) {
        if (!fs_1.default.existsSync(destinationPath)) {
            fs_1.default.mkdirSync(destinationPath, { recursive: true });
        }
        const files = fs_1.default.readdirSync(sourcePath);
        for (const file of files) {
            const sourceFile = path_1.default.join(sourcePath, file);
            const destinationFile = path_1.default.join(destinationPath, file);
            await (0, exports.copyDirOrFile)(sourceFile, destinationFile);
        }
    }
    else {
        fs_1.default.mkdirSync(path_1.default.dirname(destinationPath), { recursive: true });
        fs_1.default.copyFileSync(sourcePath, destinationPath);
    }
};
exports.copyDirOrFile = copyDirOrFile;
const deleteDirOrFile = async (dirOrFilePath) => {
    if (fs_1.default.existsSync(dirOrFilePath)) {
        const stat = fs_1.default.lstatSync(dirOrFilePath);
        if (stat.isDirectory()) {
            const files = fs_1.default.readdirSync(dirOrFilePath);
            for (const file of files) {
                const curPath = path_1.default.join(dirOrFilePath, file);
                await (0, exports.deleteDirOrFile)(curPath);
            }
            fs_1.default.rmdirSync(dirOrFilePath);
        }
        else {
            fs_1.default.unlinkSync(dirOrFilePath);
        }
    }
};
exports.deleteDirOrFile = deleteDirOrFile;
