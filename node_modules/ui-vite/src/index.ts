import { App } from 'vue'
import * as components from './components'
import { Scope } from 'tools-vue3'

const install = (app: App): void => {
    Scope.CEventBean = CEventBean
    Scope.TimerBean = TimerBean

    for (const key in components) {
        //@ts-ignore
        app.component(key, components[key].default)
    }
}

if (!window.VConf) {
    /**
     * 获取加载资源方法
     * @param obj
     * @returns
     */
    const getLoad = (obj: any) => {
        return {
            resource: {},
            setRes: (url: string, content: any) => {
                const _fun = obj.fun
                _fun.resource[url] = content
            },
            getRes: (url: string) => {
                const _fun = obj.fun
                return _fun.resource[url]
            },
            load: {},
            getResorce: async (_url: string, save: boolean = false) => {
                const _fun = obj.fun
                let filestr: any
                //控制对同资源加载的统一处理，避免重复加载
                const req = _fun.load[_url]
                if (req) {
                    filestr = await req
                } else {
                    _fun.load[_url] = new Promise(async (res) => {
                        const _json = await FileUtil.getFile(_url)
                        if (save && _json) _fun.setRes(_url, _json)
                        res(_json)
                        _fun.load[_url] = undefined
                        delete _fun.load[_url]
                    })
                    filestr = await _fun.load[_url]
                }
                return filestr
            }
        }
    }
    const VConf = {
        vsicon: {
            url: 'https://cdn.c44.cc/vsicon',
            lib: 'ant',
            name: 'up',
            size: '20',
            unit: 'px',
            fun: {} as any
        },
        vicon: {
            url: 'https://cdn.c44.cc/vicon',
            lib: 'ant',
            name: 'up',
            size: '20',
            unit: 'px',
            color: 'currentColor',
            nofill: false,
            fun: {} as any
        },
        zindex: {
            mask: 1000
        }
    } as VConfType
    VConf.vicon.fun = getLoad(VConf.vicon)
    VConf.vsicon.fun = getLoad(VConf.vsicon)

    window.VConf = VConf
}

export default {
    install,
    VConf: window.VConf as VConfType
}
