/**
 * 局部成员
 */
export default class Scope {
    /**
     * 创建组件内共享变量
     * @param key 共享名称 -默认取conf
     * @param getObjFun 返回reactive对象或者返回reactive对象的方法
     * @example
     * Scope.setConf(reactive({name:1}))
     *        ||
     * Scope.setConf('conf',reactive({name:1}))
     *
     * Scope.setConf('mconf',reactive({name:2}))
     * @returns
     */
    static setConf: (key?: any, getObjFun?: any) => void;
    /**
     * 获取组件内共享变量
     * @param key 共享名称-默认取conf
     * @param index 级别-存在多个时用到，默认为1
     * @example
     * const mconf = Scope.getConf()
     *                      ||
     * const mconf = Scope.getConf('conf')
     *
     * const mconf = Scope.getConf('conf',2)
     * @returns
     */
    static getConf: <T = any>(key?: any, index?: number) => T;
    static CEventBean: CEventBeanObj;
    /**
     * 获取一个页面销毁不再触发的事件管理器(使用前先赋值CEventBean)
     * @example
     * @returns
     */
    static Event: <T = CEventBeanInter>() => T;
    static TimerBean: TimerBeanObj;
    /**
     * 获取一个定时器(使用前先赋值TimerBean)
     * @returns
     */
    static Timer: <T = TimerBeanInter>() => T;
}
