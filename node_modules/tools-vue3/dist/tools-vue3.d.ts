/**
 * 事件管理对象
 */
interface CEventBeanInter {
    /**
     * 提供默认的挂载验证事件，默认为通过，需要手动销毁事件
     * @returns
     * @example
     * //在vue3中使用
        import { getCurrentInstance } from 'vue'
        const findTopTag = (el: any, tag: string = 'html'): any => {
            if (!el?.parentElement) return null
            if (el.parentElement.tagName.toLocaleLowerCase() === tag) return el.parentElement
            else return findTopTag(el.parentElement, tag)
        }
        CEvent.eventbean.vm = function () {
            const _vm = getCurrentInstance()
            return () => findTopTag(_vm?.vnode.el?.parentElement)
        }
     */
    vm: () => () => boolean
    eventMap: Map<any, any>
    id: string
    tag: string
    /**
     * 注册
     * @param key 注册名称
     * @param callback 执行回调
     * @param target 附带信息
     * @returns 返回唯一注册id
     */
    on: (key: any, callback: (data: any) => any, vm?: any) => string
    /**
     * 调用
     * @param key 注册名称
     * @param data 回调函数传入参数
     * @param emitAll 通知所有事件对象（CEvent和所有new CEventBean()），默认为true
     */
    emit: (key: any, data?: any, emitAll?: boolean) => void
    /**
     * 销毁
     * @mode 模式1:多id或者key名称传入-off('onid1')、off('onid1','getData'...)
     * @mode 模式2:on方法传入的key和方法-off('getData',fun)
     * @param uids-传入的是id或者key加方法清理的是key的单个注册，传入的是key清理key所有注册
     */
    off: (...uids: any) => void
    clear: () => void
}
interface CEventBeanObj {
    new (): CEventBeanInter
}

/**
 *  定时器对象
 */
interface TimerBeanInter {
    map: {
        [key: string]: TimerInfo
    }
    /**
     * 提供默认的挂载验证事件，默认为通过，需要手动销毁定时时间对象
     * @returns
     * @example
     * //在vue3中使用
        import { getCurrentInstance } from 'vue'
        const findTopTag = (el: any, tag: string = 'html'): any => {
            if (!el?.parentElement) return null
            if (el.parentElement.tagName.toLocaleLowerCase() === tag) return el.parentElement
            else return findTopTag(el.parentElement, tag)
        }
        const timer = new TimerBean()
        timer.vm = function () {
            const _vm = getCurrentInstance()
            return () => findTopTag(_vm?.vnode.el?.parentElement)
        }
     */
    vm: () => () => boolean
    /**
     * 添加一个延时任务
     * @param fun
     * @param timeGap -延迟时间
     */
    once: (fun: () => void, timeGap?: number, vm?: any) => any
    /**
     * 清空任务-仅能清理TimerBean中的任务
     */
    clear: () => void
    /**
     * 等待时间单位 1-毫秒 1000-秒
     */
    delayUnit: number
    /**
     * 等待时间
     * @param millisecond
     * @returns
     */
    delay: (millisecond?: number, delayUnit?: number) => Promise<void>
    /**
     * 添加一个循环任务
     * @param fun
     * @param timeGap -循环时间
     * @param firstRun -立即执行一次
     *
     */
    on: (fun: () => void, timeGap: number, firstRun?: boolean, vm?: any) => any
    /**
     *  清理循环-仅能清理TimerBean中的任务
     */
    un: (...ids: any[]) => void
}
interface TimerBeanObj {
    new (): TimerBeanInter
}

type TimerInfo = {
    /**
     * 任务内容
     * @returns
     */
    fun: () => void
    /**
     * 挂载节点验证
     */
    vm: any

    /**
     * 任务id
     */
    id: string

    /**
     * 清理
     */
    remove: () => void
}
