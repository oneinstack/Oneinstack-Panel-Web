interface TimeBeanInter {
    /**
     * 动画初始配置
     */
    target: TimeParam;
    /**
     * 动画结果配置
     */
    options: Required<TimeBeanParam>;
    /**
     * 处理前数据
     */
    optionsSource: TimeParam;
    /**
     * 进度百分比
     */
    percent: number;
    /**
     * 动画耗时
     */
    usedTime: number;
    /**
     * 是否暂停
     */
    paused: boolean;
    /**
     * 是否反转
     */
    reversed: boolean;
    /**
     * 已循环次数
     */
    usedLoop: number;
    /**
     * 速度
     */
    speed: number;
    /**
     * 动画过渡缓存
     */
    easeMap: {
        [key: string]: any[];
    };
    /**
     * 设置初始值
     */
    setOptionSource(target?: TimeParam): void;
    /**
     * 设置目标值
     */
    setOption(options: TimeBeanParam): void;
    /**
     * 清除所有动作并开始
     */
    start(): void;
    /**
     * 开始下一次循环
     */
    init(): void;
    /**
     * 渲染函数
     */
    update(timestamp: number): void;
    /**
     * 动画渲染逻辑
     */
    animate: () => void;
    /**
     * 渲染当前值
     */
    render: () => void;
    /**
     * 暂停动画
     */
    pause(): void;
    /**
     * 恢复动画
     */
    resume(): void;
    /**
     * 反向运动
     */
    reverse(): void;
    /**
     * 直接切换到整个动画变化时长的x秒的时间点的状态（不包括延迟时间）
     * @param time
     */
    seek(time: number, percent?: number): void;
    /**
     * 直接切换到整个变化过程的百分比的节点状态（不包括延迟时间）
     */
    progress(percent: number): void;
    /**
     * 让运动减速或者加速
     * @param scale
     */
    scale(scale: number): void;
    /**
     * 销毁实例
     */
    kill(): void;
}
/**
 * 常用变换属性
 */
interface TimeParam {
    [key: string]: any;
    /**
     * x位移
     */
    x?: number;
    /**
     * y位移
     */
    y?: number;
    /**
     * 透明度
     */
    opacity?: number;
    /**
     * 缩放
     */
    scale?: number;
    /**
     * 缩放x轴
     */
    scaleX?: number;
    /**
     * 缩放y轴
     */
    scaleY?: number;
    /**
     * 旋转
     */
    rotate?: number;
    /**
     * 旋转
     */
    rotateZ?: number;
}
type TimeAniFun = (param: {
    /**
     * 属性值
     */
    key: string;
    /**
     * 起始值
     */
    start: number;
    /**
     * 结束值
     */
    end: number;
    /**
     * 当前进度
     */
    percent: number;
}, bean: TimeBeanObj) => any;
/**
 * 参数
 */
interface TimeProps {
    /**
     * 初始值
     */
    target: TimeParam & {
        /**
         * 唯一名称
         */
        name: string;
    };
    /**
     * 耗时-默认为3000
     */
    time?: number;
    /**
     * 耗时-默认为3000
     */
    duration?: number;
    /**
     * 动画渲染前回调
     */
    updateBefore?: (bean: TimeBeanObj) => any;
    /**
     * 动画渲染后回调
     */
    update?: (bean: TimeBeanObj) => any;
    /**
     * 动画结束回调
     */
    final?: (target: any, status?: boolean) => any;
    /**
     * 延迟时间-默认为0
     */
    delay?: number;
    /**
     * 是否循环-默认为0，-1为无限循环，3为循环3次
     */
    loop?: number;
    /**
     * 自定义动画执行结果-如果返回为数组为所有结果并进行缓存（以key进行缓存），不会再继续执行相同的key，如果不是数组则取当前值，不返回值时（undefined）使用ease函数进行取值
     * @param param
     * @todo 出现16进制的颜色会使用颜色渐变算法
     * @returns
     */
    action?: TimeAniFun;
    /**
     * 自定义指定key的默认动画过渡函数-默认为匀速运动
     * @param param
     * @returns
     */
    ease?: {
        [key: string]: TimeAniFun | undefined;
        /**
         * 默认应用到所有属性的过渡函数
         */
        default?: TimeAniFun;
    };
    /**
     * 自定义销毁函数，用于Time销毁调用
     */
    kill?: () => any;
}
type TimeBeanParam = TimeProps & TimeParam;
{};
interface TimeBeanObj { new (options: TimeBeanParam):TimeBeanInter}
